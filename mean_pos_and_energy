{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mTiucxA_JLV8"
   },
   "source": [
    "## Source Localization starting with mean position of source\n",
    "\n",
    "Author: Anmol Harshana\n",
    "\n",
    "###### We already know that the time of arrival of wavelets can differ between the various receivers which are spread on the surface of moon. However, we can baseline source location as well as improve the prediction of receiver configuration if we have a fair enough baseline for source positon. So let's try the approach\n",
    "\n",
    "1. Get a baseline source location by average value of time received on various receivers\n",
    "2. Update source position to a better estimate (question is how)\n",
    "3. Update receiver's guessed position to fit with this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "7jsJy8D3JLV_"
   },
   "outputs": [],
   "source": [
    "# importing the requiered libraries\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "-SZ58rbWJLWB"
   },
   "outputs": [],
   "source": [
    "# Testing out with 101 receivers and \n",
    "\n",
    "rec_pos_act= np.zeros(shape =(101,2))  # Assigning thr actual receiver position\n",
    "rec_pos_act[:,:] = 0 # The deployer is at origin. \n",
    "noise_r = np.random.normal(loc=0.0,scale =100,size = (101,2))\n",
    "t_rec_ideal = np.zeros(shape =(101,1))  # ideal value at receivers\n",
    "rec_pos_mes= rec_pos_act +noise_r   \n",
    "t_rec_ideal[0:101] = np.sqrt((rec_pos_mes[0:101,1]-100)**2 + (rec_pos_mes[0:101,0]-100)**2).reshape(101,1)\n",
    "noise_t = np.random.normal(loc=0.0,scale =0.2,size = (101,1))\n",
    "t_Rec_real = t_rec_ideal + noise_t\n",
    "\n",
    "c = 1 # velocity of propagation\n",
    "\n",
    "# Note the different order in which the noises are added this time. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "j1cLUsEsJLWC"
   },
   "outputs": [],
   "source": [
    "# Getting the baseline value for source estimation\n",
    "\n",
    "t_avg =np.mean(t_Rec_real)\n",
    "source_pos = t_avg*c\n",
    "x_start = source_pos/2  # Start search from the point of the half the radius\n",
    "x_end = source_pos* np.sqrt(2)  # End search here\n",
    "y_start = x_start\n",
    "y_end = x_end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "vvRyvEKnJLWD"
   },
   "outputs": [],
   "source": [
    "def src_Loc(rec_pos, t_rec,c,src_pos):\n",
    "    '''The function returns the difference between the position of source(guessed) and receiver location as calculated from \n",
    "    measurement of time difference of arrival with the distance calculated from position of source and receiver. We aim to \n",
    "    minimise this quantity\n",
    "\n",
    "    rec_pos = a matrix with position of receivers stored in the following format [[x_1, y_1],[x_2,y_2]]\n",
    "    t_rec  = the time of arrival as measured from data\n",
    "    source_loc = the guessed source location for which the function is being evaluated\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    n_rec = np.shape(rec_pos)[0]\n",
    "    t_rec_rel1 = np.zeros(shape=(n_rec-1,1))   # time difference calculated wrt the value in first receiver\n",
    "    \n",
    "    t_rec_rel1[:] = t_rec[1:] -t_rec[0]     \n",
    "    \n",
    "    rec_pos_src_rel = np.zeros(shape =(n_rec-1,2)) # Calculating the relative position of recivers wrt the source\n",
    "    \n",
    "    rec_pos_src_rel[:] = rec_pos[1:] -src_pos*np.ones_like(rec_pos_src_rel)  # relative position of receiver 1 wrt the source\n",
    "    \n",
    "    rec1_pos_src_rel = rec_pos[0] -src_pos # the position of receiver one wrt the source\n",
    "    \n",
    "    rec_dist_src_rel = np.zeros(shape=(n_rec-1,1))\n",
    "    \n",
    "    rec1_dist_src_rel = np.sqrt(rec1_pos_src_rel[0]**2 + rec1_pos_src_rel[1]**2)\n",
    "    \n",
    "    rec_dist_src_rel[:] = np.sqrt(rec_pos_src_rel[:,0]**2 + rec_pos_src_rel[:,1]**2).reshape(n_rec-1,1)\n",
    "    \n",
    "    delta_r = t_rec_rel1*c\n",
    "    \n",
    "    error = np.zeros(shape =(n_rec-1,1))   # defing the error to be minimized\n",
    "    error[:] = delta_r[:] - (rec_dist_src_rel[:]-rec1_dist_src_rel)   \n",
    "    \n",
    "    error_to_min =np.dot(error.T,error) # Getting a single value instead of an array\n",
    "    \n",
    "    return error_to_min\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 422
    },
    "id": "gpU6n4YcJLWE",
    "outputId": "e30aec1a-a4e2-4463-8203-16a8be6a7aa6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Error contour for receivers with error in both time of arrival and known position')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1 restricting by radial measurements\n",
    "# Now evaluating the function at various points in 2D\n",
    "\n",
    "x,y =np.mgrid[-500:500:1000j,-500:500:1000j]  # a 2D grid for defining domain and evaluation of source position\n",
    "error = 1e8 * np.ones(shape=(1000,1000))  # To store the values at various points\n",
    "rec_pos_modified = np.zeros_like(rec_pos_act)\n",
    "noise_r = np.random.normal(loc=0.0,scale =10,size = (101,2))\n",
    "rec_pos_modified[:] = rec_pos_mes[:]+ noise_r # Can modify later if required\n",
    "rad_domain = np.sqrt(x**2 + y**2) # radius from the origin of each point in domain\n",
    "r_avg = t_avg*c\n",
    "for i in range(1000):\n",
    "    for j in range(1000): \n",
    "        if rad_domain[i,j] > r_avg  - 20  and  rad_domain[i,j] < r_avg  + 20:\n",
    "            error[i,j] = src_Loc(rec_pos=rec_pos_modified,t_rec=t_Rec_real,c=c,src_pos=np.array([x[i,j],y[i,j]]))\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.contourf(x,y,error,levels=50)\n",
    "plt.plot(rec_pos_mes[:,0],rec_pos_mes[:,1],'b.',label='Receivers')\n",
    "plt.plot(100,100,'r^',label='Source position Actual')\n",
    "plt.plot(x[np.where(error == np.min(error))],y[np.where(error == np.min(error))],'g^',label='Source position estimated')\n",
    "plt.plot()\n",
    "plt.legend()\n",
    "plt.xlim(-500,500)\n",
    "plt.ylim(-500,500)\n",
    "plt.xlabel('X(m)')\n",
    "plt.ylabel('Y(m)')\n",
    "plt.axis('equal')\n",
    "plt.colorbar()\n",
    "plt.title('Error contour for receivers with error in both time of arrival and known position')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "2PX0iXq0qJma"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Error contour for receivers with error in both time of arrival and known position')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a slight modification in code by encapsulating the\n",
    "# search region between min and max time of arrival\n",
    "\n",
    "# 1 restricting by radial measurements\n",
    "# Now evaluating the function at various points in 2D\n",
    "\n",
    "x,y =np.mgrid[-500:500:1000j,-500:500:1000j]  # a 2D grid for defining domain and evaluation of source position\n",
    "error = 1e8 * np.ones(shape=(1000,1000))  # To store the values at various points\n",
    "rec_pos_modified = np.zeros_like(rec_pos_act)\n",
    "noise_r = np.random.normal(loc=0.0,scale =10,size = (101,2))\n",
    "rec_pos_modified[:] = rec_pos_mes[:]+ noise_r # Can modify later if required\n",
    "rad_domain = np.sqrt(x**2 + y**2) # radius from the origin of each point in domain\n",
    "r_min = np.min(t_Rec_real)*c\n",
    "r_max = np.max(t_Rec_real)*c\n",
    "for i in range(1000):\n",
    "    for j in range(1000): \n",
    "        if rad_domain[i,j] > r_min  and  rad_domain[i,j] < r_max:\n",
    "            error[i,j] = src_Loc(rec_pos=rec_pos_modified,t_rec=t_Rec_real,c=c,src_pos=np.array([x[i,j],y[i,j]]))\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.contourf(x,y,error,levels=50)\n",
    "plt.plot(rec_pos_mes[:,0],rec_pos_mes[:,1],'b.',label='Receivers')\n",
    "plt.plot(100,100,'r^',label='Source position Actual')\n",
    "plt.plot(x[np.where(error == np.min(error))],y[np.where(error == np.min(error))],'g^',label='Source position estimated')\n",
    "plt.plot()\n",
    "plt.legend()\n",
    "plt.xlim(-500,500)\n",
    "plt.ylim(-500,500)\n",
    "plt.xlabel('X(m)')\n",
    "plt.ylabel('Y(m)')\n",
    "plt.axis('equal')\n",
    "plt.colorbar()\n",
    "plt.title('Error contour for receivers with error in both time of arrival and known position')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Search domain is larger but this will cover the corner cases such as the source being placed at the origin. Let's try it once with source at origin. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Testing out with 101 receivers and \n",
    "\n",
    "rec_pos_act= np.zeros(shape =(101,2))  # Assigning thr actual receiver position\n",
    "rec_pos_act[:,:] = 0 # The deployer is at origin. \n",
    "noise_r = np.random.normal(loc=0.0,scale =100,size = (101,2))\n",
    "t_rec_ideal = np.zeros(shape =(101,1))  # ideal value at receivers\n",
    "rec_pos_mes= rec_pos_act +noise_r   \n",
    "t_rec_ideal[0:101] = np.sqrt((rec_pos_mes[0:101,1]-0)**2 + (rec_pos_mes[0:101,0]-0)**2).reshape(101,1)\n",
    "noise_t = np.random.normal(loc=0.0,scale =0.2,size = (101,1))\n",
    "t_Rec_real = t_rec_ideal + noise_t\n",
    "\n",
    "c = 1 # velocity of propagation\n",
    "\n",
    "# Note the different order in which the noises are added this time. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Error contour for receivers with error in both time of arrival and known position')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a slight modification in code by encapsulating the\n",
    "# search region between min and max time of arrival\n",
    "\n",
    "# 1 restricting by radial measurements\n",
    "# Now evaluating the function at various points in 2D\n",
    "\n",
    "x,y =np.mgrid[-500:500:1000j,-500:500:1000j]  # a 2D grid for defining domain and evaluation of source position\n",
    "error = 1e8 * np.ones(shape=(1000,1000))  # To store the values at various points\n",
    "rec_pos_modified = np.zeros_like(rec_pos_act)\n",
    "noise_r = np.random.normal(loc=0.0,scale =10,size = (101,2))\n",
    "rec_pos_modified[:] = rec_pos_mes[:]+ noise_r # Can modify later if required\n",
    "rad_domain = np.sqrt(x**2 + y**2) # radius from the origin of each point in domain\n",
    "r_min = np.min(t_Rec_real)*c\n",
    "r_max = np.max(t_Rec_real)*c\n",
    "for i in range(1000):\n",
    "    for j in range(1000): \n",
    "        if rad_domain[i,j] > r_min  and  rad_domain[i,j] < r_max:\n",
    "            error[i,j] = src_Loc(rec_pos=rec_pos_modified,t_rec=t_Rec_real,c=c,src_pos=np.array([x[i,j],y[i,j]]))\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.contourf(x,y,error,levels=50)\n",
    "plt.plot(rec_pos_mes[:,0],rec_pos_mes[:,1],'b.',label='Receivers')\n",
    "plt.plot(0,0,'r^',label='Source position Actual')\n",
    "plt.plot(x[np.where(error == np.min(error))],y[np.where(error == np.min(error))],'g^',label='Source position estimated')\n",
    "plt.plot()\n",
    "plt.legend()\n",
    "plt.xlim(-500,500)\n",
    "plt.ylim(-500,500)\n",
    "plt.xlabel('X(m)')\n",
    "plt.ylabel('Y(m)')\n",
    "plt.axis('equal')\n",
    "plt.colorbar()\n",
    "plt.title('Error contour for receivers with error in both time of arrival and known position')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now adding the function for energy calculation\n",
    "\n",
    "def total_Energy(recx_data,recy_data,recz_data,dt):\n",
    "    '''The function returns the total value of energy received by\n",
    "    the receivers. Method is based on first calculation of fourier\n",
    "    transform and then energies are added up.\n",
    "    recx_data = data received by receiver in x direction\n",
    "    similarly for y and z\n",
    "    dt = time interval between two consecutive data points'''\n",
    "    n = np.shape(recx_data)[0]\n",
    "    recfreq=np.fft.fftfreq(np.shape(recx_data)[0],d=dt)  # the frequencies\n",
    "    ffta_x=np.zeros(shape=(n,np.size(recfreq)))          # amplitudes in x direction\n",
    "    ffta_y=np.zeros(shape=(n,np.size(recfreq)))          # amplitudes in y direction\n",
    "    ffta_z=np.zeros(shape=(n,np.size(recfreq)))          # amplitudes in z direction\n",
    "    for i in range(n):\n",
    "        ffta_x[i,:]=abs((np.fft.fft(recx_data[:,i]))**2)\n",
    "        ffta_y[i,:]=abs((np.fft.fft(recy_data[:,i]))**2)\n",
    "        ffta_z[i,:]=abs((np.fft.fft(recz_data[:,i]))**2) \n",
    "    Energy=0\n",
    "    for i in range(n):\n",
    "        Energy+=np.dot(recfreq**2,ffta_x[i,:])\n",
    "        Energy+=np.dot(recfreq**2,ffta_y[i,:])\n",
    "        Energy+=np.dot(recfreq**2,ffta_z[i,:])\n",
    "    return Energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_Energy(np.array([[1,1],[1,1]]),np.array([[1,1],[1,1]]),np.array([[1,1],[1,1]]),0.02)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For proper checking of this function, onset picker for time detection and waveform data from devito will be required. \n",
    "\n",
    "To judge the magnitude of impact let's define a parameter as energy received/r_avg^2. The greater the parameter, the stronger will be the event."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def source_Comparison(Energy,TOA_p,TOA_s,vp,vs):\n",
    "    '''Energy is total energy received by all receivers. TOA_p\n",
    "    and TOA_s are the times of arrivals for p and s wave. In\n",
    "    this function we'll primarily use TOA_p. vp and vs are\n",
    "    p and s wave velocities.\n",
    "    \n",
    "    The function returns Energy/r_avg^2 for comparison of sources'''\n",
    "    \n",
    "    r_avg = np.mean(TOA_p) * vp\n",
    "    return Energy/r_avg**2\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Source_localization_mean_pos_method.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
